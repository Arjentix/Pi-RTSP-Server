/* Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.*/

#include <unistd.h>

#include <cstdio>
#include <jpeglib.h>

#include <iostream>
#include <vector>
#include <memory>

#include <raspicam.h>
#include "profiler.h"
#include "camera.h"
#include "byte.h"

using namespace std;

/**
 * @brief Convert raw image data to jpeg data
 *
 * @param raw_image Pointer to raw image data
 * @param width Image width
 * @param height Image height
 * @param quality Quality of resulting image in [0, 100] range
 * @return Jpeg image in bytes
 */
Bytes ConvertToJpeg(JSAMPLE *raw_image, const int width, const int height,
                    const int quality) {
  jpeg_compress_struct cinfo;
  jpeg_error_mgr jerr;
  unsigned char *buffer = nullptr;
  unsigned long buffer_size = 0;

  JSAMPROW row_pointer[1];	// pointer to JSAMPLE row[s]
  int row_stride;		    // physical row width in image buffer

  cinfo.err = jpeg_std_error(&jerr);
  jpeg_create_compress(&cinfo);

  jpeg_mem_dest(&cinfo, &buffer, &buffer_size);

  cinfo.image_width = width;
  cinfo.image_height = height;
  cinfo.input_components = 3;		// # of color components per pixel
  cinfo.in_color_space = JCS_RGB; 	// colorspace of input image

  jpeg_set_defaults(&cinfo);
  jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);

  {
    TIME_IT("  Start compress")
    jpeg_start_compress(&cinfo, TRUE);
  }

  row_stride = width * 3;	// JSAMPLEs per row in image_buffer

  {
    TIME_IT("  While loop")
    while (cinfo.next_scanline < cinfo.image_height) {
      row_pointer[0] = &raw_image[cinfo.next_scanline * row_stride];
//      for (int i = 0; i < 16; ++i) {
//        row_pointer[i] = &raw_image[(cinfo.next_scanline + i)* row_stride];
//      }
      (void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
    }
  }

  jpeg_finish_compress(&cinfo);
  jpeg_destroy_compress(&cinfo);

  Bytes res(buffer, buffer + buffer_size);
  free(buffer);
  return res;
}

/**
 * @brief Grab image from camera in jpeg format
 *
 * @param quality Quality of resulting image in [0, 100] range
 * @return Jpeg image in bytes
 */
Bytes GrabImage(const int quality) {
  raspicam::RaspiCam &camera = Camera::GetInstance();
  {
    TIME_IT(" Grab");
    camera.grab();
  }
  auto raw_image_ptr = std::make_unique<unsigned char[]>(
      camera.getImageTypeSize(raspicam::RASPICAM_FORMAT_RGB));
  {
    TIME_IT(" Retrieve");
    camera.retrieve(raw_image_ptr.get());
  }

  Bytes image;
  {
    TIME_IT(" ConvertToJpeg")
    image = ConvertToJpeg(raw_image_ptr.get(), camera.getWidth(),
                               camera.getHeight(), quality);
  }
  return image;
}

int main() {
  std::cout << "Opening Camera" << std::endl;
  Camera::GetInstance();
  std::cout << "Camera is ready" << std::endl;
  {
    TIME_IT("GrabImage");
    Bytes image = GrabImage(30);
  }

  return 0;
}
