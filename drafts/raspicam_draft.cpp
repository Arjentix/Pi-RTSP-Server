/* Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.*/

#include <unistd.h>

#include <cstdio>
#include <jpeglib.h>

#include <iostream>
#include <memory>

#include <raspicam.h>

using namespace std;

void WriteJpegFile(JSAMPLE *image_buffer, int image_width, int image_height, const char * filename, int quality)
{
  // This struct contains the JPEG compression parameters
  struct jpeg_compress_struct cinfo;
  // This struct represents a JPEG error handler
  struct jpeg_error_mgr jerr;

  FILE * outfile;		    // target file
  JSAMPROW row_pointer[1];	// pointer to JSAMPLE row[s]
  int row_stride;		    // physical row width in image buffer

  /* Step 1: allocate and initialize JPEG compression object */

  cinfo.err = jpeg_std_error(&jerr);
  jpeg_create_compress(&cinfo);

  /* Step 2: specify data destination (eg, a file) */

  if ((outfile = fopen(filename, "wb")) == NULL) {
    fprintf(stderr, "can't open %s\n", filename);
    exit(1);
  }
  jpeg_stdio_dest(&cinfo, outfile);

  /* Step 3: set parameters for compression */

  cinfo.image_width = image_width;
  cinfo.image_height = image_height;
  cinfo.input_components = 3;		// # of color components per pixel
  cinfo.in_color_space = JCS_RGB; 	// colorspace of input image

  jpeg_set_defaults(&cinfo);
  jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);

  /* Step 4: Start compressor */

  jpeg_start_compress(&cinfo, TRUE);

  row_stride = image_width * 3;	// JSAMPLEs per row in image_buffer

  while (cinfo.next_scanline < cinfo.image_height) {
    row_pointer[0] = & image_buffer[cinfo.next_scanline * row_stride];
    (void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
  }

  /* Step 5: Finish compression */

  jpeg_finish_compress(&cinfo);
  fclose(outfile);

  /* Step 6: release JPEG compression object */
  jpeg_destroy_compress(&cinfo);
}

int main() {
    raspicam::RaspiCam camera;  // Camera object
    camera.setFormat(raspicam::RASPICAM_FORMAT_RGB);
    cout << "Opening Camera..." << endl;
    if (!camera.open()) {
        cerr << "Error opening camera" << endl;
        return -1;
    }
    // wait a while until camera stabilizes
    cout << "Sleeping for 3 secs" << endl;
    sleep(3);

    const string kFilename = "raspicam_image.jpeg";

    camera.grab();
    auto data_ptr = make_unique<unsigned char[]>(
        camera.getImageTypeSize(raspicam::RASPICAM_FORMAT_RGB));
    // extract the image in rgb format
    camera.retrieve(data_ptr.get());  // get camera image
    // save
    WriteJpegFile(reinterpret_cast<JSAMPLE *>(data_ptr.get()), camera.getWidth(), camera.getHeight(), kFilename.c_str(), 50);

    cout << "Image saved at " << kFilename << endl;
    return 0;
}
